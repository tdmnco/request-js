{"version":3,"sources":["request.js","index.js"],"names":["Request","context","data","options","url","constructor","delete","get","patch","post","put","_request","method","xhr","XMLHttpRequest","key","open","send","Promise","resolve","reject","onabort","error","onerror","onprogress","onreadystatechange","readyState","status","responseText","ontimeout"],"mappings":";AAsGA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EArGMA,IAAAA,EAqGN,WAlGcC,SAAAA,EAAAA,GAAS,EAAA,KAAA,GACdC,KAAAA,KAAOD,EAAQC,KACfC,KAAAA,QAAUF,EAAQE,QAClBC,KAAAA,IAAMH,EAAQG,IA+FvB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAtBW,MAAA,WACA,OAAA,KAAKC,YAAYC,OAAO,QAqBnC,CAAA,IAAA,MAlBQ,MAAA,WACG,OAAA,KAAKD,YAAYE,IAAI,QAiBhC,CAAA,IAAA,QAdU,MAAA,WACC,OAAA,KAAKF,YAAYG,MAAM,QAalC,CAAA,IAAA,OAVS,MAAA,WACE,OAAA,KAAKH,YAAYI,KAAK,QASjC,CAAA,IAAA,MANQ,MAAA,WACG,OAAA,KAAKJ,YAAYK,IAAI,SAKhC,CAAA,CAAA,IAAA,SA3FgBT,MAAAA,SAAAA,GACL,OAAA,KAAKU,SAAS,SAAUV,KA0FnC,CAAA,IAAA,MAvFaA,MAAAA,SAAAA,GACF,OAAA,KAAKU,SAAS,MAAOV,KAsFhC,CAAA,IAAA,QAnFeA,MAAAA,SAAAA,GACJ,OAAA,KAAKU,SAAS,QAASV,KAkFlC,CAAA,IAAA,OA/EcA,MAAAA,SAAAA,GACH,OAAA,KAAKU,SAAS,OAAQV,KA8EjC,CAAA,IAAA,MA3EaA,MAAAA,SAAAA,GACF,OAAA,KAAKU,SAAS,MAAOV,KA0EhC,CAAA,IAAA,WAtEkBW,MAAAA,SAAAA,EAAQX,GAChBY,IAAAA,EAAM,IAAIC,eACVX,EAAUF,EAAQE,QAEpBA,GAAAA,EACG,IAAA,IAAIY,KAAOZ,EACdU,EAAIE,GAAOZ,EAAQY,GAQhB,OAJPF,EAAIG,KAAKJ,EAAQX,EAAQG,KAEzBS,EAAII,KAAKhB,EAAQC,MAEV,IAAIgB,QAAQ,SAACC,EAASC,GAC3BP,EAAIQ,QAAU,SAACC,GACbF,EAAO,CAAEE,MAAAA,KAGXT,EAAIU,QAAU,SAACD,GACbF,EAAO,CAAEE,MAAAA,KAGPrB,EAAQE,UACVU,EAAIW,WAAavB,EAAQE,QAAQqB,YAGnCX,EAAIY,mBAAqB,WACnBZ,GAAmB,IAAnBA,EAAIa,WAAkB,CAClBC,IAAAA,EAASd,EAAIc,OAEfA,GAAU,KAAOA,EAAS,KAC5BR,EAAQ,CAAEjB,KAAMW,EAAIe,aAAcD,OAAAA,IAGhCA,GAAU,KAAOA,EAAS,KAC5BP,EAAO,CAAElB,KAAMW,EAAIe,aAAcD,OAAAA,MAKvCd,EAAIgB,UAAY,SAACP,GACfF,EAAO,CAAEE,MAAAA,WA4BjB,EAAA,GAAA,QAAA,QAAA;;ACrGA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,IAAA,EAAA,QAAA","file":"request.js","sourceRoot":"../src/js","sourcesContent":["// Classes:\nclass Request {\n  \n  // Constructor:\n  constructor(context) {\n    this.data = context.data\n    this.options = context.options\n    this.url = context.url\n  }\n\n  // Static functions:\n  static delete(context) {\n    return this._request('DELETE', context)\n  }\n\n  static get(context) {\n    return this._request('GET', context)\n  }\n\n  static patch(context) {\n    return this._request('PATCH', context)\n  }\n\n  static post(context) {\n    return this._request('POST', context)\n  }\n\n  static put(context) {\n    return this._request('PUT', context)\n  }\n\n  // Static private functions:\n  static _request(method, context) {\n    const xhr = new XMLHttpRequest()\n    const options = context.options\n\n    if (options) {\n      for (let key in options) {\n        xhr[key] = options[key]\n      }\n    }\n\n    xhr.open(method, context.url)\n\n    xhr.send(context.data)\n\n    return new Promise((resolve, reject) => {\n      xhr.onabort = (error) => {\n        reject({ error })\n      }\n\n      xhr.onerror = (error) => {\n        reject({ error })\n      }\n\n      if (context.options) {\n        xhr.onprogress = context.options.onprogress\n      }\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          const status = xhr.status\n          \n          if (status >= 100 && status < 400) {\n            resolve({ data: xhr.responseText, status })\n          }\n          \n          if (status >= 400 && status < 600) {\n            reject({ data: xhr.responseText, status })\n          }\n        }\n      }\n\n      xhr.ontimeout = (error) => {\n        reject({ error })\n      }\n    })\n  } \n\n  // Functions:\n  delete() {\n    return this.constructor.delete(this)\n  }\n  \n  get() {\n    return this.constructor.get(this)\n  }\n\n  patch() {\n    return this.constructor.patch(this)\n  }\n\n  post() {\n    return this.constructor.post(this)\n  }\n\n  put() {\n    return this.constructor.put(this)\n  }\n  \n}\n\n// Exports:\nexport { Request }","// Exports:\nexport { Request } from './request'"]}